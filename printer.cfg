[include mainsail.cfg]

[include homing.cfg]

[include EBB.cfg]

[include KAMP_Settings.cfg]

[include timelapse.cfg]

[include Macro/led status2.cfg]

#[include Macro/heat soak.cfg]

[include shaketune.cfg]

#[include chamberheater.cfg]

[include config_backup.cfg]

[include Macro/filament swap.cfg]


# This file contains common pin mappings for the BIGTREETECH Manta M8P V2.0
# To use this config, the firmware should be compiled for the
# STM32H723 with a "8KiB bootloader" and USB communication.

# This config is currently only correct for V2.0 boards
# 
# See docs/Config_Reference.md for a description of parameters.

[force_move]
enable_force_move: True

[exclude_object]


[mcu]
canbus_uuid=5918bc072821
##	[X in MOTOR1] - B Motor
##	[Y in MOTOR2] - A Motor
##	[E in MOTOR8] - Extruder
##	Obtain definition by "ls /dev/serial/by-id/*" then unplug to verify
##--------------------------------------------------------------------
#serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_460025000751313339373836-if00

#restart_method: command
##--------------------------------------------------------------------

[printer]
kinematics: corexy
max_velocity: 350  
max_accel: 3000    			#Max 4000
max_z_velocity: 15 			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5

[temperature_sensor MCU]
sensor_type: temperature_mcu

[temperature_sensor SoC]
sensor_type: temperature_host

[temperature_sensor Chamber]
sensor_type: Generic 3950
sensor_pin: PB0 

#####################################################################
# 	X/Y Stepper Settings
#####################################################################

## X Stepper on Motor1(B Motor)
[stepper_x]
step_pin: PE6
dir_pin: PE5
enable_pin: !PC14
microsteps: 16
rotation_distance: 40
full_steps_per_rotation:400  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_x:virtual_endstop  #^PF4
position_min: 0
position_endstop: 350
position_max: 350
homing_speed: 45   #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC13
interpolate: True
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: PF4
driver_SGTHRS: 120

## Y Stepper on Motor2 (A Motor)
[stepper_y]
step_pin: PE2
dir_pin: PE1
enable_pin: !PE4
microsteps: 16
rotation_distance: 40
endstop_pin: tmc2209_stepper_y:virtual_endstop
#^PF3
full_steps_per_rotation:400  #set to 400 for 0.9 degree stepper
position_min: -20
position_endstop: 350
position_max: 350
homing_speed: 45  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PE3
interpolate: True
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: PF3
driver_SGTHRS: 120

#####################################################################
# 	Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left on MOTOR3_A
[stepper_z]
step_pin: PB8
dir_pin: PB7
enable_pin: !PE0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
endstop_pin: probe:z_virtual_endstop #^PF2
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##	Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5
##----------------------------------------------------------------

##	Uncomment below for 350mm build
position_max: 340

##--------------------------------------------------------------------
position_min: -5
homing_speed: 20
second_homing_speed: 3
homing_retract_dist: 3

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PB9
interpolate: true
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z1 Stepper - Rear Left on Motor5
[stepper_z1]
step_pin: PG13
dir_pin: !PG12
enable_pin: !PG15
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PG14
interpolate: true
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z2 Stepper - Rear Right on Motor6
[stepper_z2]
step_pin: PG9
dir_pin: PD7
enable_pin: !PG11
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PG10
interpolate: true
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z3 Stepper - Front Right on Motor7
[stepper_z3]
step_pin: PD4
dir_pin: !PD3
enable_pin: !PD6
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PD5
interpolate: true
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
# 	Extruder
#####################################################################

#	E0 on Motor8
#[extruder]
#step_pin: PC7
#dir_pin: PC8
#enable_pin: !PD2
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
#rotation_distance: 22.6789511   #Bondtech 5mm Drive Gears
##  Update Gear Ratio depending on your Extruder Type
##  Use 50:10 for Stealthburner/Clockwork 2
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
#gear_ratio: 50:10
#microsteps: 16
#full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
#nozzle_diameter: 0.400
#filament_diameter: 1.75
#heater_pin: PA0
##	Validate the following thermistor type to make sure it is correct

## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
#sensor_type:

#sensor_pin: PB0
#min_temp: 10
#max_temp: 270
#max_power: 1.0
#min_extrude_temp: 170
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##	Try to keep pressure_advance below 1.0
#pressure_advance: 0.05
##	Default is 0.040, leave stock
#pressure_advance_smooth_time: 0.040

##	E0 on Motor7
##	Make sure to update below for your relevant driver (2208 or 2209)
#[tmc2209 extruder]
#uart_pin: PC6
#interpolate: false
#run_current: 0.5
#sense_resistor: 0.110
#stealthchop_threshold: 0

#[filament_switch_sensor material_0]
#switch_pin: PC1

#[filament_switch_sensor material_1]
#switch_pin: PC2

#[filament_motion_sensor encoder_sensor]
#detection_length: 7
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
#extruder: extruder
#   The name of the extruder section this sensor is associated with.
#   This parameter must be provided.
#switch_pin: ^PF10
# changing the switch_pin name according to your motherboard
#pause_on_runout: True
#event_delay: 3.0
#pause_delay: 0.5
#runout_gcode:  M117 Runout Detected!
#[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
#initial_duration: 1
#gcode:
 #   SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=



#####################################################################
# 	Bed Heater
#####################################################################

[heater_bed]
##	SSR Pin - HE1
heater_pin: PF5
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
sensor_type: Generic 3950
sensor_pin: PB1
##  Adjust max_power so it doesn't exceed the SSR rating. The Omron G3NA-210B-DC5 SSR is rated at 4 amps without a heatsink.
##  The formula is "4 / (Wattage_of_bed_heater / Mains_voltage) = max_power"
##  If max_power is greater than 1.0, use 1.0
max_power: 0.75
min_temp: 0
max_temp: 150
control: pid
pid_kp: 51.838
pid_ki: 1.422
pid_kd: 412.370

#####################################################################
#   Bed fans
#####################################################################

############### Config options ##################

[gcode_macro _BEDFANVARS]
variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_innerfast: 0.5		# Fan speed once bed temp is reached
variable_outerfast: 0.6     
variable_innerslow: 0.2		# Fan speed while bed is heating
variable_outerslow: 0.2
gcode:

########## Bed Fans #########

[fan_generic Bed_Inner]
pin: PF8
cycle_time: 0.05
kick_start_time: 0.5

[fan_generic Bed_Outer]
pin: PF9
cycle_time: 0.05
kick_start_time: 0.5

########## Aliases #########

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set INNERSLOW = printer["gcode_macro _BEDFANVARS"].innerslow|float %}
	{% set OUTERSLOW = printer["gcode_macro _BEDFANVARS"].outerslow|float %}
	
	SET_FAN_SPEED FAN=Bed_Inner SPEED={INNERSLOW}
	SET_FAN_SPEED FAN=Bed_Outer SPEED={OUTERSLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set INNERFAST = printer["gcode_macro _BEDFANVARS"].innerfast|float %}
	{% set OUTERFAST = printer["gcode_macro _BEDFANVARS"].outerfast|float %}
	
	SET_FAN_SPEED FAN=Bed_Inner SPEED={INNERFAST}
	SET_FAN_SPEED FAN=Bed_Outer SPEED={OUTERFAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=Bed_Inner SPEED=0
	SET_FAN_SPEED FAN=Bed_Outer SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BEDFANSOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}


#####################################################################
# 	Probe
#####################################################################

[probe]
##	Inductive Probe
##	This probe is not used for Z height, only Quad Gantry Leveling
##  NPN and PNP proximity switch types can be set by jumper
#pin: PF1 #M4-STOP
#x_offset: 0
#y_offset: 25.0
#z_offset: 0
#speed: 10.0
#samples: 3
#samples_result: median
#sample_retract_dist: 3.0
#samples_tolerance: 0.006
#samples_tolerance_retries: 3


activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}
    

#####################################################################
# 	Fan Control
#####################################################################

#[fan]
##	Print Cooling Fan - CNC_FAN0
#pin: PF7
#kick_start_time: 0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
#off_below: 0.10

#[heater_fan hotend_fan]
##	Hotend Fan - CNC_FAN1
#pin: PF9
#max_power: 1.0
#kick_start_time: 0.5
#heater: extruder
#heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0


#[heater_fan exhaust_fan]
##	Exhaust fan - CNC_FAN3
#pin: PF8
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

#[heater_fan fan4]
#pin: PA4

#[heater_fan fan5]
#pin: PA6
#tachometer_pin: PC2

#[heater_fan fan6]
#pin: PA2
#tachometer_pin: PC1

[controller_fan stepper_fan]
pin: PF7                # Pin for controlling the stepper cooling fan (change to your correct pin)
max_power: 1.0           # Maximum fan power (full power)
off_below: 0.10          # The fan will turn off when stepper power drops below 0.10
idle_timeout: 120        # Time (in seconds) after stepper activity to keep fan running
stepper: stepper_x, stepper_y, stepper_z, stepper_z1, stepper_z2, stepper_z3   # Link the fan to X and Y stepper motors


[temperature_fan soc_fan]
pin: PF6                                # Replace with your actual fan control pin
sensor_type: temperature_host            # The sensor type for SoC temperature
control: pid                            # PID control for smooth fan speed adjustment
max_temp: 120
min_temp: 30
target_temp: 50.0
min_speed: 0.3
max_speed: 1.0
shutdown_speed: 1.0
pid_Kp: 10.0                             # PID proportional coefficient
pid_Ki: 0.5                              # PID integral coefficient
pid_Kd: 0.0                              # PID derivative coefficient


#####################################################################
# 	LED Control
#####################################################################

[output_pin Chamber_light]
# Chamber Lighting - HE2 Connector (Optional)
pin: PA5
pwm:false
shutdown_value: 0
value:1
#cycle_time: 0.01



#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

#[safe_z_home]
##	XY Location of the Z Endstop Switch
##	Update -10,-10 to the XY coordinates of your endstop pin 
##	(such as 157,305) after going through Z Endstop Pin
##	Location Definition step.
#home_xy_position:170,170
#speed:100
#z_hop:10

[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions

##	Gantry Corners for 350mm Build
##	Uncomment for 350mm build
gantry_corners:
	-60,-10
	410,420
#	Probe points
points:
	50,25
	50,275
	300,275
	300,25

#--------------------------------------------------------------------
speed: 100
horizontal_move_z: 10
retries: 8
retry_tolerance: 0.0075
max_adjust: 10

[bed_mesh]
speed: 50
horizontal_move_z: 5
mesh_min: 10, 10
mesh_max: 290, 290
probe_count: 5, 5
algorithm: bicubic
fade_start: 1.0
fade_end: 10.0
fade_target: 0.0

[input_shaper]
shaper_freq_x: 47.8 # center frequency for the X axis filter
shaper_type_x: mzv # filter type for the X axis
shaper_freq_y: 32.2 # center frequency for the Y axis filter
shaper_type_y: mzv # filter type for the Y axis
damping_ratio_x: 0.063 # damping ratio for the X axis
damping_ratio_y: 0.075 # damping ratio for the Y axis

#--------------------------------------------------------------------


[board_pins]
aliases:
    # EXP1 header
   # EXP1_1=PE7, EXP1_2=PG1,
   # EXP1_3=PG0, EXP1_4=PF15,
   # EXP1_5=PF14, EXP1_6=PF13,    # Slot in the socket on this side
   # EXP1_7=PF12, EXP1_8=PF11,
   # EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
   # EXP2_1=PE13, EXP2_2=PE12,
   # EXP2_3=PE15, EXP2_4=PE11,
  #  EXP2_5=PE10, EXP2_6=PE14,      # Slot in the socket on this side
  #  EXP2_7=PE8, EXP2_8=<RST>,
   # EXP2_9=<GND>, EXP2_10=<NC>


#####################################################################
# 	Macros
#####################################################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set z_safe = 10 %}
    {% set x_safe = 5 %}
    {% set y_safe = 5 %}
    {% set max_y = 350 %}

    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    G0 Z{z_safe} F3600 ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000 ; move nozzle to remove stringing
    M107 ; turn off fan
    G90 ; absolute positioning
    G0 X60 Y{max_y} F3600 ; park nozzle at rear
    BED_MESH_CLEAR




[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    
    ##	Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
   
#--------- Print Start -----------
[gcode_macro PRINT_START]
#description: Called when starting print
gcode:

   #[gcode_macro SFS_ENABLE] ; Add this to PRINT_START
#description: Enable smart filament sensor
#gcode:
   # M117 ENABLING the Smart Filament Sensor
   # G92 E0
   # SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1 ; Put your filament sensor's name after SENSOR=

  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}M104 S180
  STATUS_HEATING
  M104 S180                  # Wait for nozzle to heat to 180C - soften filament, but no oozing.
  M190 S{ params.BED }
  STATUS_HOMING
  G28                   # Full home (XYZ)
  BED_MESH_CLEAR
  
  M107                       # Print fan off
  STATUS_LEVELING
  QUAD_GANTRY_LEVEL             #Trident uses Z_TILT_ADJUST, V2 uses QUAD_GANTRY_LEVEL  
  STATUS_MESHING 
  BED_MESH_CALIBRATE ADAPTIVE=1   # MESH FOR LEVELING

  STATUS_PRINTING
  
  M109 S{ params.EXTRUDER }
    G1 X0.1 Y200.0 Z0.3 F1500.0 E15 ; draw 1st line
    G1 X0.4 Y200.0 Z0.3 F5000.0 ; move to side a little
    G1 X0.4 Y20 Z0.3 F1500.0 E30 ; draw 2nd line
    G92 E0
  

[gcode_macro PRINT_END]
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; Wait for buffer to clear
    G92 E0                         ; Reset extruder
    G1 E-3.0 F3600                 ; Small retract

    G91                            ; Relative positioning
    G1 Z5 F3000                    ; Raise nozzle
    G90                            ; Absolute positioning

    G0 X20 Y20 F18000              ; Move away from part
    M104 S0                        ; Turn off hotend
    G0 X125 Y250 F3600             ; Park tool (adjust as needed)

    M140 S0                        ; Turn off bed
    M107                           ; Turn off print fan

    G4 S1000                         ; Wait 30 seconds to let bed cool a bit

    BEDFANSOFF                     ; Turn off bed cooling fans (your macro)
    BED_MESH_CLEAR

    STATUS_READY

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0


    #############################################
    #     Spoolman
    #############################################

    
[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}
    
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

[include moonraker_obico_macros.cfg]
#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.038130, 0.168963, 0.090630
#*# 	  0.062297, 0.140630, 0.029797
#*# 	  0.035630, 0.116463, 0.068130
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 10.0
#*# max_x = 290.0
#*# min_y = 10.0
#*# max_y = 290.0
